{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;ACjCD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA,mCAAmC,SAAS,IAAI,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;UCzBvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,wCAAU;AACnC,0BAA0B,mBAAO,CAAC,0DAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC","sources":["webpack://pixel-draw-app/./src/client/canvas.ts","webpack://pixel-draw-app/./src/client/webSocketClient.ts","webpack://pixel-draw-app/webpack/bootstrap","webpack://pixel-draw-app/./src/client/index.ts"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Canvas = void 0;\r\nclass Canvas {\r\n    constructor() {\r\n        this.pixelSize = 10;\r\n        this.canvas = document.getElementById('drawingCanvas');\r\n        this.context = this.canvas.getContext('2d');\r\n    }\r\n    initialize() {\r\n        // Use the dimensions specified in HTML\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 600;\r\n        this.clear();\r\n    }\r\n    getDrawingData(event) {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const x = Math.floor((event.clientX - rect.left) / this.pixelSize) * this.pixelSize;\r\n        const y = Math.floor((event.clientY - rect.top) / this.pixelSize) * this.pixelSize;\r\n        const color = document.getElementById('colorPicker').value;\r\n        return { x, y, color, size: this.pixelSize };\r\n    }\r\n    draw({ x, y, color, size }) {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(x, y, size, size);\r\n    }\r\n    getCanvasElement() {\r\n        return this.canvas;\r\n    }\r\n    clear() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n}\r\nexports.Canvas = Canvas;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WebSocketClient = void 0;\r\nclass WebSocketClient {\r\n    constructor() {\r\n        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n        this.ws = new WebSocket(`${protocol}//${window.location.host}`);\r\n    }\r\n    connect() {\r\n        this.ws.onopen = () => {\r\n            console.log('Connected to server');\r\n        };\r\n        this.ws.onerror = (error) => {\r\n            console.error('WebSocket error:', error);\r\n        };\r\n    }\r\n    onMessage(callback) {\r\n        this.ws.onmessage = callback;\r\n    }\r\n    send(data) {\r\n        if (this.ws.readyState === WebSocket.OPEN) {\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n}\r\nexports.WebSocketClient = WebSocketClient;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst canvas_1 = require(\"./canvas\");\r\nconst webSocketClient_1 = require(\"./webSocketClient\");\r\nconst canvas = new canvas_1.Canvas();\r\nconst webSocketClient = new webSocketClient_1.WebSocketClient();\r\ncanvas.initialize();\r\nwebSocketClient.connect();\r\nlet isDrawing = false;\r\nwebSocketClient.onMessage((event) => {\r\n    const drawingEvent = JSON.parse(event.data);\r\n    canvas.draw(drawingEvent);\r\n});\r\n(_a = document.getElementById('clearButton')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\r\n    canvas.clear();\r\n});\r\ncanvas.getCanvasElement().addEventListener('mousedown', (event) => {\r\n    isDrawing = true;\r\n    const drawingData = canvas.getDrawingData(event);\r\n    canvas.draw(drawingData);\r\n    webSocketClient.send(JSON.stringify(drawingData));\r\n});\r\ncanvas.getCanvasElement().addEventListener('mousemove', (event) => {\r\n    if (!isDrawing)\r\n        return;\r\n    const drawingData = canvas.getDrawingData(event);\r\n    canvas.draw(drawingData);\r\n    webSocketClient.send(JSON.stringify(drawingData));\r\n});\r\ncanvas.getCanvasElement().addEventListener('mouseup', () => {\r\n    isDrawing = false;\r\n});\r\ncanvas.getCanvasElement().addEventListener('mouseleave', () => {\r\n    isDrawing = false;\r\n});\r\n"],"names":[],"sourceRoot":""}